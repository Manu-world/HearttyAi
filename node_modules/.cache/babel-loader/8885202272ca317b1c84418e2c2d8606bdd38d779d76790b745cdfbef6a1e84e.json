{"ast":null,"code":"var _jsxFileName = \"/home/manu/Documents/heartyAi/frontend/src/components/DoctorsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useAuth } from \"../path/to/useAuth\"; // Adjust the import path accordingly\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictionForm = () => {\n  _s();\n  const {\n    userEmail\n  } = useAuth();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    age: \"\",\n    sex: \"\",\n    cp: \"\",\n    trestbps: \"\",\n    chol: \"\",\n    fbs: \"\",\n    restecg: \"\",\n    thalach: \"\",\n    exang: \"\",\n    oldpeak: \"\",\n    slope: \"\",\n    ca: \"\",\n    thal: \"\"\n  });\n  const [predictionResult, setPredictionResult] = useState(null);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // const { email, ...predictionData } = formData; // Destructure email and remaining data\n    try {\n      const response = await axios.post(\"http://localhost:3000/prediction\", formData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const resultWithEmail = response.data.response; // Add email to the prediction result\n      setPredictionResult(resultWithEmail);\n    } catch (error) {\n      console.error(\"Prediction failed:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Heart Disease Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: formData.email,\n          onChange: handleChange,\n          required: true,\n          autoComplete: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), Object.keys(formData).map(key => {\n        if (key !== \"email\") {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: key,\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: key,\n              name: key,\n              value: formData[key],\n              onChange: handleChange,\n              required: true,\n              autoComplete: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Predict\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), predictionResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Prediction Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(predictionResult, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(PredictionForm, \"xdficGPGUlKv/4KbXJo9CsTni4Q=\", false, function () {\n  return [useAuth];\n});\n_c = PredictionForm;\nexport default PredictionForm;\nvar _c;\n$RefreshReg$(_c, \"PredictionForm\");","map":{"version":3,"names":["React","useState","axios","useAuth","jsxDEV","_jsxDEV","PredictionForm","_s","userEmail","formData","setFormData","email","age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldpeak","slope","ca","thal","predictionResult","setPredictionResult","handleChange","e","name","value","target","prevData","handleSubmit","preventDefault","response","post","headers","resultWithEmail","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","autoComplete","Object","keys","map","key","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/manu/Documents/heartyAi/frontend/src/components/DoctorsPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useAuth } from \"../path/to/useAuth\"; // Adjust the import path accordingly\n\nconst PredictionForm = () => {\n  const { userEmail } = useAuth();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    age: \"\",\n    sex: \"\",\n    cp: \"\",\n    trestbps: \"\",\n    chol: \"\",\n    fbs: \"\",\n    restecg: \"\",\n    thalach: \"\",\n    exang: \"\",\n    oldpeak: \"\",\n    slope: \"\",\n    ca: \"\",\n    thal: \"\",\n  });\n  const [predictionResult, setPredictionResult] = useState(null);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // const { email, ...predictionData } = formData; // Destructure email and remaining data\n    try {\n      const response = await axios.post(\n        \"http://localhost:3000/prediction\",\n        formData,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      const resultWithEmail = response.data.response; // Add email to the prediction result\n      setPredictionResult(resultWithEmail);\n    } catch (error) {\n      console.error(\"Prediction failed:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Heart Disease Prediction</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n            autoComplete=\"email\"\n          />\n        </div>\n        {/* Render input fields for each parameter */}\n        {Object.keys(formData).map((key) => {\n          if (key !== \"email\") {\n            return (\n              <div key={key}>\n                <label htmlFor={key}>{key}</label>\n                <input\n                  type=\"text\"\n                  id={key}\n                  name={key}\n                  value={formData[key]}\n                  onChange={handleChange}\n                  required\n                  autoComplete={key}\n                />\n              </div>\n            );\n          }\n          return null;\n        })}\n        <button type=\"submit\">Predict</button>\n      </form>\n      {predictionResult && (\n        <div>\n          <h3>Prediction Result</h3>\n          <pre>{JSON.stringify(predictionResult, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PredictionForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}